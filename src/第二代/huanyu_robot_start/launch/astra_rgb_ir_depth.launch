
<launch>
 

  <arg name="camera"          default="camera" />
  <arg name="rgb_frame_id"    default="$(arg camera)_rgb_optical_frame" />
  <arg name="depth_frame_id"  default="$(arg camera)_depth_optical_frame" />

  <arg name="device_id"       default="#1" />
  <arg name="bootorder"       default="0" />
  <arg name="devnums"         default="1" />
 
  <arg name="rgb_camera_info_url"             default="" />
  <arg name="depth_camera_info_url"           default="" />
 

  <arg name="depth_registration"              default="false" />
 

  <arg name="color_depth_synchronization"     default="false" />
  <arg name="auto_exposure"                   default="true" />
  <arg name="auto_white_balance"              default="true" />
  <arg name="rgb"                             default="rgb" />
  <arg name="ir"                              default="ir" />
  <arg name="depth"                           default="depth" />
  <arg name="load_driver"                     default="true" />
  <arg name="publish_tf"                      default="true" />

  <arg name="rgb_processing"                  default="true"  />
  <arg name="debayer_processing"              default="false" />
  <arg name="ir_processing"                   default="false" />
  <arg name="depth_processing"                default="true" />
  <arg name="depth_registered_processing"     default="true" />
  <arg name="disparity_processing"            default="false" />
  <arg name="disparity_registered_processing" default="false" />
  <arg name="hw_registered_processing"        default="true" if="$(arg depth_registration)" />
  <arg name="sw_registered_processing"        default="false" if="$(arg depth_registration)" />
  <arg name="hw_registered_processing"        default="false" unless="$(arg depth_registration)" />
  <arg name="sw_registered_processing"        default="true" unless="$(arg depth_registration)" />
 
  <arg name="respawn" default="false" />
  <arg name="num_worker_threads" default="4" />
 
  <group ns="$(arg camera)">
 
        <!-- Start nodelet manager -->
        <arg name="manager" value="$(arg camera)_nodelet_manager" />
        <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
        <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
          <arg name="name" value="$(arg manager)" />
          <arg name="debug" value="$(arg debug)" />
          <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
        </include>
 
    <!-- Load driver -->
    <include file="$(find astra_launch)/launch/includes/device.launch.xml" if="$(arg load_driver)">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="device_id"                       value="$(arg device_id)" />
      <arg name="bootorder"                       value="$(arg bootorder)" />
      <arg name="devnums"                         value="$(arg devnums)" />
      <arg name="rgb_frame_id"                    value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"                  value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"             value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url"           value="$(arg depth_camera_info_url)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="depth_registration"              value="$(arg depth_registration)" />
      <arg name="color_depth_synchronization"     value="$(arg color_depth_synchronization)" />
      <arg name="auto_exposure"                   value="$(arg auto_exposure)" />
      <arg name="auto_white_balance"              value="$(arg auto_white_balance)" />
    </include>
 
    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
      <arg name="debayer_processing"              value="$(arg debayer_processing)" />
      <arg name="ir_processing"                   value="$(arg ir_processing)" />
      <arg name="depth_processing"                value="$(arg depth_processing)" />
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
      <arg name="disparity_processing"            value="$(arg disparity_processing)" />
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
      <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
      <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
    </include>
 
 
  <node pkg="uvc_camera" type="uvc_camera_node" name="uvc_camera" output="screen">
        <param name="device"            value="/dev/video0" /> 
        <param name="camera_info_url"   value="$(arg rgb_camera_info_url)" />
        <param name="camera_name"       value="rgb_Astra_Orbbec"/>
        <param name="width"             value="640" />
        <param name="height"            value="480" />
        <param name="fps"               value="30" />
        <param name="frame_id"          value="camera_rgb_optical_frame" />
        
        <remap from="/camera/camera_info"      to="/camera/rgb/camera_info"/>
        <remap from="/camera/image_raw"        to="/camera/rgb/image_raw"/>
    </node>
  </group> <!-- camera -->
 
  <!-- Load reasonable defaults for the relative pose between cameras -->
  <include file="$(find astra_launch)/launch/includes/astra_frames.launch" if="$(arg publish_tf)">
    <arg name="camera" value="$(arg camera)" />
  </include>
 
 
</launch>
